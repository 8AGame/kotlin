FILE fqName:<root> fileName:/branches.kt
  FUN name:ifGreaterOrEqualToZero visibility:public modality:FINAL <> (a:kotlin.Int) returnType:kotlin.Boolean
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    BLOCK_BODY
      VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.Boolean [var]
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun jsGtEq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
            arg0: GET_VAR 'a: kotlin.Int declared in <root>.ifGreaterOrEqualToZero' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=0
          then: BLOCK type=kotlin.Unit origin=null
            SET_VAR 'var tmp: kotlin.Boolean [var] declared in <root>.ifGreaterOrEqualToZero' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              CONST Boolean type=kotlin.Boolean value=true
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: BLOCK type=kotlin.Unit origin=null
            SET_VAR 'var tmp: kotlin.Boolean [var] declared in <root>.ifGreaterOrEqualToZero' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              CONST Boolean type=kotlin.Boolean value=false
      RETURN type=kotlin.Nothing from='public final fun ifGreaterOrEqualToZero (a: kotlin.Int): kotlin.Boolean declared in <root>'
        GET_VAR 'var tmp: kotlin.Boolean [var] declared in <root>.ifGreaterOrEqualToZero' type=kotlin.Boolean origin=SYNTHESIZED_STATEMENT
  FUN name:whenGreaterOrEqualToZero visibility:public modality:FINAL <> (a:kotlin.Int) returnType:kotlin.Boolean
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun whenGreaterOrEqualToZero (a: kotlin.Int): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=WHEN
          BRANCH
            if: CALL 'public final fun jsGtEq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GTEQ
              arg0: GET_VAR 'a: kotlin.Int declared in <root>.whenGreaterOrEqualToZero' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=0
            then: CONST Boolean type=kotlin.Boolean value=true
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN name:whenMultiBranch visibility:public modality:FINAL <> (a:kotlin.Int) returnType:kotlin.Int
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    BLOCK_BODY
      VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Int [val]
        GET_VAR 'a: kotlin.Int declared in <root>.whenMultiBranch' type=kotlin.Int origin=null
      RETURN type=kotlin.Nothing from='public final fun whenMultiBranch (a: kotlin.Int): kotlin.Int declared in <root>'
        WHEN type=kotlin.Int origin=WHEN
          BRANCH
            if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenMultiBranch' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=1
            then: CONST Int type=kotlin.Int value=-1
          BRANCH
            if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenMultiBranch' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=2
            then: CONST Int type=kotlin.Int value=-2
          BRANCH
            if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenMultiBranch' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=3
            then: CONST Int type=kotlin.Int value=-3
          BRANCH
            if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenMultiBranch' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=4
            then: CONST Int type=kotlin.Int value=-4
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Int type=kotlin.Int value=0
  CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.A
    CONSTRUCTOR visibility:public <> (a:kotlin.Int) returnType:<root>.A [primary]
      annotations:
        CompileTimeCalculation
      VALUE_PARAMETER name:a index:0 type:kotlin.Int
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
        SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=INITIALIZE_FIELD
          receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
          value: GET_VAR 'a: kotlin.Int declared in <root>.A.<init>' type=kotlin.Int origin=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN DEFAULT_PROPERTY_ACCESSOR name:<set-a> visibility:public modality:FINAL <> ($this:<root>.A, <set-?>:kotlin.Int) returnType:kotlin.Unit
      correspondingProperty: PROPERTY name:a visibility:public modality:FINAL [var]
      $this: VALUE_PARAMETER name:<this> type:<root>.A
      VALUE_PARAMETER name:<set-?> index:0 type:kotlin.Int
      BLOCK_BODY
        SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=null
          receiver: GET_VAR '<this>: <root>.A declared in <root>.A.<set-a>' type=<root>.A origin=null
          value: GET_VAR '<set-?>: kotlin.Int declared in <root>.A.<set-a>' type=kotlin.Int origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a> visibility:public modality:FINAL <> ($this:<root>.A) returnType:kotlin.Int
      correspondingProperty: PROPERTY name:a visibility:public modality:FINAL [var]
      $this: VALUE_PARAMETER name:<this> type:<root>.A
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun <get-a> (): kotlin.Int declared in <root>.A'
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Int origin=null
            receiver: GET_VAR '<this>: <root>.A declared in <root>.A.<get-a>' type=<root>.A origin=null
    FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  FUN name:whenWithoutReturn visibility:public modality:FINAL <> (aObj:<root>.A) returnType:kotlin.Int
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:aObj index:0 type:<root>.A
    BLOCK_BODY
      VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Int [val]
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Int origin=GET_PROPERTY
          receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutReturn' type=<root>.A origin=null
      WHEN type=kotlin.Unit origin=WHEN
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutReturn' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=1
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutReturn' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-1
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutReturn' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=2
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutReturn' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-2
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutReturn' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=3
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutReturn' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-3
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutReturn' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=4
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutReturn' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-4
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutReturn' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=0
      RETURN type=kotlin.Nothing from='public final fun whenWithoutReturn (aObj: <root>.A): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Int origin=GET_PROPERTY
          receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutReturn' type=<root>.A origin=null
  FUN name:whenWithoutElse visibility:public modality:FINAL <> (aObj:<root>.A) returnType:kotlin.Int
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:aObj index:0 type:<root>.A
    BLOCK_BODY
      VAR IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Int [val]
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Int origin=GET_PROPERTY
          receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutElse' type=<root>.A origin=null
      WHEN type=kotlin.Unit origin=WHEN
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutElse' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=1
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutElse' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-1
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutElse' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=2
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutElse' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-2
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutElse' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=3
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutElse' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-3
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'val tmp0_subject: kotlin.Int [val] declared in <root>.whenWithoutElse' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=4
          then: SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Unit origin=EQ
            receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutElse' type=<root>.A origin=null
            value: CONST Int type=kotlin.Int value=-4
      RETURN type=kotlin.Nothing from='public final fun whenWithoutElse (aObj: <root>.A): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Int visibility:private' type=kotlin.Int origin=GET_PROPERTY
          receiver: GET_VAR 'aObj: <root>.A declared in <root>.whenWithoutElse' type=<root>.A origin=null
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a> visibility:public modality:FINAL <> () returnType:kotlin.Boolean
    correspondingProperty: PROPERTY name:a visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-a> (): kotlin.Boolean declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Boolean visibility:public [final,static]' type=kotlin.Boolean origin=null
  FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Boolean visibility:public [final,static]
    EXPRESSION_BODY
      CONST Boolean type=kotlin.Boolean value=true
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b> visibility:public modality:FINAL <> () returnType:kotlin.Boolean
    correspondingProperty: PROPERTY name:b visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b> (): kotlin.Boolean declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b type:kotlin.Boolean visibility:public [final,static]' type=kotlin.Boolean origin=null
  FIELD PROPERTY_BACKING_FIELD name:b type:kotlin.Boolean visibility:public [final,static]
    EXPRESSION_BODY
      CONST Boolean type=kotlin.Boolean value=false
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-constIf> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:constIf visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-constIf> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:constIf type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:constIf type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="True"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-multi1> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:multi1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-multi1> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:multi1 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:multi1 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=-2
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-multi2> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:multi2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-multi2> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:multi2 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:multi2 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=-4
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-multi3> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:multi3 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-multi3> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:multi3 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:multi3 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=0
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c1> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:c1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c1> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c1 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:c1 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=-1
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c2> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:c2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c2> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c2 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:c2 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=-3
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c3> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:c3 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c3> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c3 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:c3 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=0
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-d1> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:d1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-d1> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d1 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:d1 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=-1
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-d2> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:d2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-d2> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d2 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:d2 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=-4
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-d3> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:d3 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-d3> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d3 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:d3 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=10
