FILE fqName:<root> fileName:/classCastException.kt
  FUN name:classCastWithException visibility:public modality:FINAL <> (a:kotlin.Any) returnType:kotlin.String
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:a index:0 type:kotlin.Any
    BLOCK_BODY
      VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
      TRY type=kotlin.Unit
        try: BLOCK type=kotlin.Unit origin=null
          WHEN type=kotlin.Int origin=SYNTHESIZED_STATEMENT
            BRANCH
              if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=SYNTHESIZED_STATEMENT
                arg0: CALL 'public final fun jsTypeOf (value_hack: kotlin.Any?): kotlin.String declared in kotlin.js' type=kotlin.String origin=SYNTHESIZED_STATEMENT
                  value_hack: GET_VAR 'a: kotlin.Any declared in <root>.classCastWithException' type=kotlin.Any origin=null
                arg1: CONST String type=kotlin.String value="number"
              then: TYPE_OP type=kotlin.Int origin=REINTERPRET_CAST typeOperand=kotlin.Int
                GET_VAR 'a: kotlin.Any declared in <root>.classCastWithException' type=kotlin.Any origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public final fun THROW_CCE (): kotlin.Nothing declared in kotlin' type=kotlin.Nothing origin=SYNTHESIZED_STATEMENT
          CALL 'public final fun Unit_getInstance (): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
          SET_VAR 'var tmp: kotlin.String [var] declared in <root>.classCastWithException' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="Given value is "
              GET_VAR 'a: kotlin.Any declared in <root>.classCastWithException' type=kotlin.Any origin=null
              CONST String type=kotlin.String value=" and its doubled value is "
              CALL 'internal final fun imul (a_local: kotlin.Int, b_local: kotlin.Int): kotlin.Int declared in kotlin.js' type=kotlin.Int origin=MUL
                a_local: CONST Int type=kotlin.Int value=2
                b_local: TYPE_OP type=kotlin.Int origin=REINTERPRET_CAST typeOperand=kotlin.Int
                  GET_VAR 'a: kotlin.Any declared in <root>.classCastWithException' type=kotlin.Any origin=null
        CATCH parameter=val $p: dynamic [val] declared in <root>.classCastWithException
          VAR SYNTHESIZED_DECLARATION name:$p type:dynamic [val]
          BLOCK type=kotlin.Unit origin=null
            VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
            WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              BRANCH
                if: CALL 'public final fun jsInstanceOf (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=SYNTHESIZED_STATEMENT
                  arg0: GET_VAR 'val $p: dynamic [val] declared in <root>.classCastWithException' type=dynamic origin=SYNTHESIZED_STATEMENT
                  arg1: CALL 'public final fun jsClass <T> (): kotlin.js.JsClass<T of kotlin.js.jsClass> [external] declared in kotlin.js' type=kotlin.js.JsClass<T of kotlin.js.jsClass> origin=SYNTHESIZED_STATEMENT
                    <T>: kotlin.ClassCastException
                then: BLOCK type=kotlin.Unit origin=null
                  SET_VAR 'var tmp: kotlin.String [var] declared in <root>.classCastWithException' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value="Given value isnt't Int; Exception message: \""
                      CALL 'public open fun <get-message> (): kotlin.String? [fake_override] declared in kotlin.ClassCastException' type=kotlin.String? origin=GET_PROPERTY
                        $this: TYPE_OP type=kotlin.ClassCastException origin=REINTERPRET_CAST typeOperand=kotlin.ClassCastException
                          GET_VAR 'val $p: dynamic [val] declared in <root>.classCastWithException' type=dynamic origin=SYNTHESIZED_STATEMENT
                      CONST String type=kotlin.String value="\""
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                  WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Unit origin=null
                        THROW type=kotlin.Nothing
                          GET_VAR 'val $p: dynamic [val] declared in <root>.classCastWithException' type=dynamic origin=SYNTHESIZED_STATEMENT
            SET_VAR 'var tmp: kotlin.String [var] declared in <root>.classCastWithException' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              GET_VAR 'var tmp: kotlin.String [var] declared in <root>.classCastWithException' type=kotlin.String origin=SYNTHESIZED_STATEMENT
      RETURN type=kotlin.Nothing from='public final fun classCastWithException (a: kotlin.Any): kotlin.String declared in <root>'
        GET_VAR 'var tmp: kotlin.String [var] declared in <root>.classCastWithException' type=kotlin.String origin=SYNTHESIZED_STATEMENT
  FUN name:safeClassCast visibility:public modality:FINAL <> (a:kotlin.Any) returnType:kotlin.Int
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:a index:0 type:kotlin.Any
    BLOCK_BODY
      VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:kotlin.String? [val]
        WHEN type=kotlin.String? origin=SYNTHESIZED_STATEMENT
          BRANCH
            if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=SYNTHESIZED_STATEMENT
              arg0: CALL 'public final fun jsTypeOf (value_hack: kotlin.Any?): kotlin.String declared in kotlin.js' type=kotlin.String origin=SYNTHESIZED_STATEMENT
                value_hack: GET_VAR 'a: kotlin.Any declared in <root>.safeClassCast' type=kotlin.Any origin=null
              arg1: CONST String type=kotlin.String value="string"
            then: TYPE_OP type=kotlin.String? origin=REINTERPRET_CAST typeOperand=kotlin.String
              GET_VAR 'a: kotlin.Any declared in <root>.safeClassCast' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Null type=kotlin.Nothing? value=null
      VAR IR_TEMPORARY_VARIABLE name:tmp1_elvis_lhs type:kotlin.Int? [val]
        WHEN type=kotlin.Int? origin=null
          BRANCH
            if: CALL 'public final fun jsEqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val tmp0_safe_receiver: kotlin.String? [val] declared in <root>.safeClassCast' type=kotlin.String? origin=null
              arg1: CONST Null type=kotlin.Nothing? value=null
            then: CONST Null type=kotlin.Nothing? value=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CALL 'public final fun jsArrayLength (arg0: kotlin.Any?): kotlin.Any? declared in kotlin.internal.ir' type=kotlin.Int origin=GET_PROPERTY
              arg0: GET_VAR 'val tmp0_safe_receiver: kotlin.String? [val] declared in <root>.safeClassCast' type=kotlin.String? origin=null
      RETURN type=kotlin.Nothing from='public final fun safeClassCast (a: kotlin.Any): kotlin.Int declared in <root>'
        WHEN type=kotlin.Int origin=null
          BRANCH
            if: CALL 'public final fun jsEqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val tmp1_elvis_lhs: kotlin.Int? [val] declared in <root>.safeClassCast' type=kotlin.Int? origin=null
              arg1: CONST Null type=kotlin.Nothing? value=null
            then: CONST Int type=kotlin.Int value=-1
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: GET_VAR 'val tmp1_elvis_lhs: kotlin.Int? [val] declared in <root>.safeClassCast' type=kotlin.Int? origin=null
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a1> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:a1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-a1> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Given value is 10 and its doubled value is 20"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a2> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:a2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-a2> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Given value isnt't Int; Exception message: \"kotlin.String cannot be cast to kotlin.Int\""
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b1> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:b1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b1> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b1 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:b1 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=-1
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b2> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:b2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b2> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b2 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:b2 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=2
