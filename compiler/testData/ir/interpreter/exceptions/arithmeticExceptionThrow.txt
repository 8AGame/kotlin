FILE fqName:<root> fileName:/arithmeticExceptionThrow.kt
  FUN name:throwExample visibility:public modality:FINAL <> (a:kotlin.Int, b:kotlin.Int) returnType:kotlin.Int
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    VALUE_PARAMETER name:b index:1 type:kotlin.Int
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'b: kotlin.Int declared in <root>.throwExample' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=0
          then: THROW type=kotlin.Nothing
            CALL 'public final fun ArithmeticException_init_$Create$ (message: kotlin.String?): kotlin.ArithmeticException declared in kotlin.ArithmeticException' type=kotlin.ArithmeticException origin=null
              message: CONST String type=kotlin.String value="Divide by zero"
      RETURN type=kotlin.Nothing from='public final fun throwExample (a: kotlin.Int, b: kotlin.Int): kotlin.Int declared in <root>'
        CALL 'public final fun jsBitOr (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Int declared in kotlin.internal.ir' type=kotlin.Int origin=SYNTHESIZED_STATEMENT
          arg0: CALL 'public final fun jsDiv (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Any? declared in kotlin.internal.ir' type=kotlin.Int origin=DIV
            arg0: GET_VAR 'a: kotlin.Int declared in <root>.throwExample' type=kotlin.Int origin=null
            arg1: GET_VAR 'b: kotlin.Int declared in <root>.throwExample' type=kotlin.Int origin=null
          arg1: CONST Int type=kotlin.Int value=0
  FUN name:throwNullMessage visibility:public modality:FINAL <> (a:kotlin.Int, b:kotlin.Int) returnType:kotlin.Int
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    VALUE_PARAMETER name:b index:1 type:kotlin.Int
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun jsEqeqeq (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
            arg0: GET_VAR 'b: kotlin.Int declared in <root>.throwNullMessage' type=kotlin.Int origin=null
            arg1: CONST Int type=kotlin.Int value=0
          then: THROW type=kotlin.Nothing
            CALL 'public final fun ArithmeticException_init_$Create$ (message: kotlin.String?): kotlin.ArithmeticException declared in kotlin.ArithmeticException' type=kotlin.ArithmeticException origin=null
              message: CONST Null type=kotlin.Nothing? value=null
      RETURN type=kotlin.Nothing from='public final fun throwNullMessage (a: kotlin.Int, b: kotlin.Int): kotlin.Int declared in <root>'
        CALL 'public final fun jsBitOr (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Int declared in kotlin.internal.ir' type=kotlin.Int origin=SYNTHESIZED_STATEMENT
          arg0: CALL 'public final fun jsDiv (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Any? declared in kotlin.internal.ir' type=kotlin.Int origin=DIV
            arg0: GET_VAR 'a: kotlin.Int declared in <root>.throwNullMessage' type=kotlin.Int origin=null
            arg1: GET_VAR 'b: kotlin.Int declared in <root>.throwNullMessage' type=kotlin.Int origin=null
          arg1: CONST Int type=kotlin.Int value=0
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a1> visibility:public modality:FINAL <> () returnType:kotlin.Boolean
    correspondingProperty: PROPERTY name:a1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-a1> (): kotlin.Boolean declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlin.Boolean visibility:public [final,static]' type=kotlin.Boolean origin=null
  FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlin.Boolean visibility:public [final,static]
    EXPRESSION_BODY
      CONST Boolean type=kotlin.Boolean value=false
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a2> visibility:public modality:FINAL <> () returnType:kotlin.Boolean
    correspondingProperty: PROPERTY name:a2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-a2> (): kotlin.Boolean declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlin.Boolean visibility:public [final,static]' type=kotlin.Boolean origin=null
  FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlin.Boolean visibility:public [final,static]
    EXPRESSION_BODY
      CONST Boolean type=kotlin.Boolean value=true
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b1> visibility:public modality:FINAL <> () returnType:kotlin.Boolean
    correspondingProperty: PROPERTY name:b1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b1> (): kotlin.Boolean declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b1 type:kotlin.Boolean visibility:public [final,static]' type=kotlin.Boolean origin=null
  FIELD PROPERTY_BACKING_FIELD name:b1 type:kotlin.Boolean visibility:public [final,static]
    EXPRESSION_BODY
      CONST Boolean type=kotlin.Boolean value=false
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b2> visibility:public modality:FINAL <> () returnType:kotlin.Boolean
    correspondingProperty: PROPERTY name:b2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b2> (): kotlin.Boolean declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b2 type:kotlin.Boolean visibility:public [final,static]' type=kotlin.Boolean origin=null
  FIELD PROPERTY_BACKING_FIELD name:b2 type:kotlin.Boolean visibility:public [final,static]
    EXPRESSION_BODY
      CONST Boolean type=kotlin.Boolean value=true
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b3> visibility:public modality:FINAL <> () returnType:kotlin.Boolean
    correspondingProperty: PROPERTY name:b3 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b3> (): kotlin.Boolean declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b3 type:kotlin.Boolean visibility:public [final,static]' type=kotlin.Boolean origin=null
  FIELD PROPERTY_BACKING_FIELD name:b3 type:kotlin.Boolean visibility:public [final,static]
    EXPRESSION_BODY
      CONST Boolean type=kotlin.Boolean value=false
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c1> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:c1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c1> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c1 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:c1 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=1
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c2> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:c2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c2> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c2 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:c2 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=1
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c3> visibility:public modality:FINAL <> () returnType:kotlin.Int
    correspondingProperty: PROPERTY name:c3 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c3> (): kotlin.Int declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c3 type:kotlin.Int visibility:public [final,static]' type=kotlin.Int origin=null
  FIELD PROPERTY_BACKING_FIELD name:c3 type:kotlin.Int visibility:public [final,static]
    EXPRESSION_BODY
      CONST Int type=kotlin.Int value=2
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-d1> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:d1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-d1> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d1 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:d1 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String? value="Divide by zero"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-d2> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:d2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-d2> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d2 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:d2 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Without exception"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-nullMessage> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:nullMessage visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-nullMessage> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:nullMessage type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:nullMessage type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Exception without message"
