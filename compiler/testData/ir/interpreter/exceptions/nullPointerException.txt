FILE fqName:<root> fileName:/nullPointerException.kt
  CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]
    annotations:
      CompileTimeCalculation
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.A
    CONSTRUCTOR visibility:public <> () returnType:<root>.A [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  FUN name:notNullAssertion visibility:public modality:FINAL <> (value:kotlin.Int?) returnType:kotlin.String
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:value index:0 type:kotlin.Int?
    BLOCK_BODY
      VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
      TRY type=kotlin.Unit
        try: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun ensureNotNull <T> (v: T of kotlin.ensureNotNull?): T of kotlin.ensureNotNull declared in kotlin' type=kotlin.Int origin=EXCLEXCL
            <T>: kotlin.Int
            v: GET_VAR 'value: kotlin.Int? declared in <root>.notNullAssertion' type=kotlin.Int? origin=null
          CALL 'public final fun Unit_getInstance (): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
          SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertion' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
            CONST String type=kotlin.String value="Value isn't null"
        CATCH parameter=val $p: dynamic [val] declared in <root>.notNullAssertion
          VAR SYNTHESIZED_DECLARATION name:$p type:dynamic [val]
          BLOCK type=kotlin.Unit origin=null
            VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
            WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              BRANCH
                if: CALL 'public final fun jsInstanceOf (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=SYNTHESIZED_STATEMENT
                  arg0: GET_VAR 'val $p: dynamic [val] declared in <root>.notNullAssertion' type=dynamic origin=SYNTHESIZED_STATEMENT
                  arg1: CALL 'public final fun jsClass <T> (): kotlin.js.JsClass<T of kotlin.js.jsClass> [external] declared in kotlin.js' type=kotlin.js.JsClass<T of kotlin.js.jsClass> origin=SYNTHESIZED_STATEMENT
                    <T>: kotlin.NullPointerException
                then: BLOCK type=kotlin.Unit origin=null
                  SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertion' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    CONST String type=kotlin.String value="Value is null"
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                  WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Unit origin=null
                        THROW type=kotlin.Nothing
                          GET_VAR 'val $p: dynamic [val] declared in <root>.notNullAssertion' type=dynamic origin=SYNTHESIZED_STATEMENT
            SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertion' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              GET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertion' type=kotlin.String origin=SYNTHESIZED_STATEMENT
      RETURN type=kotlin.Nothing from='public final fun notNullAssertion (value: kotlin.Int?): kotlin.String declared in <root>'
        GET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertion' type=kotlin.String origin=SYNTHESIZED_STATEMENT
  FUN name:notNullAssertionForObject visibility:public modality:FINAL <> (value:<root>.A?) returnType:kotlin.String
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:value index:0 type:<root>.A?
    BLOCK_BODY
      VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
      TRY type=kotlin.Unit
        try: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun ensureNotNull <T> (v: T of kotlin.ensureNotNull?): T of kotlin.ensureNotNull declared in kotlin' type=<root>.A origin=EXCLEXCL
            <T>: <root>.A
            v: GET_VAR 'value: <root>.A? declared in <root>.notNullAssertionForObject' type=<root>.A? origin=null
          CALL 'public final fun Unit_getInstance (): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
          SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForObject' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
            CONST String type=kotlin.String value="Value isn't null"
        CATCH parameter=val $p: dynamic [val] declared in <root>.notNullAssertionForObject
          VAR SYNTHESIZED_DECLARATION name:$p type:dynamic [val]
          BLOCK type=kotlin.Unit origin=null
            VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
            WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              BRANCH
                if: CALL 'public final fun jsInstanceOf (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=SYNTHESIZED_STATEMENT
                  arg0: GET_VAR 'val $p: dynamic [val] declared in <root>.notNullAssertionForObject' type=dynamic origin=SYNTHESIZED_STATEMENT
                  arg1: CALL 'public final fun jsClass <T> (): kotlin.js.JsClass<T of kotlin.js.jsClass> [external] declared in kotlin.js' type=kotlin.js.JsClass<T of kotlin.js.jsClass> origin=SYNTHESIZED_STATEMENT
                    <T>: kotlin.NullPointerException
                then: BLOCK type=kotlin.Unit origin=null
                  SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForObject' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    CONST String type=kotlin.String value="Value is null"
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                  WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Unit origin=null
                        THROW type=kotlin.Nothing
                          GET_VAR 'val $p: dynamic [val] declared in <root>.notNullAssertionForObject' type=dynamic origin=SYNTHESIZED_STATEMENT
            SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForObject' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              GET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForObject' type=kotlin.String origin=SYNTHESIZED_STATEMENT
      RETURN type=kotlin.Nothing from='public final fun notNullAssertionForObject (value: <root>.A?): kotlin.String declared in <root>'
        GET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForObject' type=kotlin.String origin=SYNTHESIZED_STATEMENT
  FUN name:notNullAssertionForSomeWrapper visibility:public modality:FINAL <> (value:kotlin.text.StringBuilder?) returnType:kotlin.String
    annotations:
      CompileTimeCalculation
    VALUE_PARAMETER name:value index:0 type:kotlin.text.StringBuilder?
    BLOCK_BODY
      VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
      TRY type=kotlin.Unit
        try: BLOCK type=kotlin.Unit origin=null
          SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForSomeWrapper' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
            CALL 'public open fun toString (): kotlin.String declared in kotlin.text.StringBuilder' type=kotlin.String origin=null
              $this: CALL 'public final fun ensureNotNull <T> (v: T of kotlin.ensureNotNull?): T of kotlin.ensureNotNull declared in kotlin' type=kotlin.text.StringBuilder origin=EXCLEXCL
                <T>: kotlin.text.StringBuilder
                v: GET_VAR 'value: kotlin.text.StringBuilder? declared in <root>.notNullAssertionForSomeWrapper' type=kotlin.text.StringBuilder? origin=null
        CATCH parameter=val $p: dynamic [val] declared in <root>.notNullAssertionForSomeWrapper
          VAR SYNTHESIZED_DECLARATION name:$p type:dynamic [val]
          BLOCK type=kotlin.Unit origin=null
            VAR SYNTHESIZED_DECLARATION name:tmp type:kotlin.String [var]
            WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              BRANCH
                if: CALL 'public final fun jsInstanceOf (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=SYNTHESIZED_STATEMENT
                  arg0: GET_VAR 'val $p: dynamic [val] declared in <root>.notNullAssertionForSomeWrapper' type=dynamic origin=SYNTHESIZED_STATEMENT
                  arg1: CALL 'public final fun jsClass <T> (): kotlin.js.JsClass<T of kotlin.js.jsClass> [external] declared in kotlin.js' type=kotlin.js.JsClass<T of kotlin.js.jsClass> origin=SYNTHESIZED_STATEMENT
                    <T>: kotlin.NullPointerException
                then: BLOCK type=kotlin.Unit origin=null
                  SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForSomeWrapper' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    CONST String type=kotlin.String value="Value is null"
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                  WHEN type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Unit origin=null
                        THROW type=kotlin.Nothing
                          GET_VAR 'val $p: dynamic [val] declared in <root>.notNullAssertionForSomeWrapper' type=dynamic origin=SYNTHESIZED_STATEMENT
            SET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForSomeWrapper' type=kotlin.Unit origin=SYNTHESIZED_STATEMENT
              GET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForSomeWrapper' type=kotlin.String origin=SYNTHESIZED_STATEMENT
      RETURN type=kotlin.Nothing from='public final fun notNullAssertionForSomeWrapper (value: kotlin.text.StringBuilder?): kotlin.String declared in <root>'
        GET_VAR 'var tmp: kotlin.String [var] declared in <root>.notNullAssertionForSomeWrapper' type=kotlin.String origin=SYNTHESIZED_STATEMENT
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a1> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:a1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-a1> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Value isn't null"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a2> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:a2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-a2> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Value is null"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b1> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:b1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b1> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b1 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:b1 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Value isn't null"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b2> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:b2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-b2> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b2 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:b2 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Value is null"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c1> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:c1 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c1> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c1 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:c1 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Some text"
  FUN DEFAULT_PROPERTY_ACCESSOR name:<get-c2> visibility:public modality:FINAL <> () returnType:kotlin.String
    correspondingProperty: PROPERTY name:c2 visibility:public modality:FINAL [const,val]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun <get-c2> (): kotlin.String declared in <root>'
        GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:c2 type:kotlin.String visibility:public [final,static]' type=kotlin.String origin=null
  FIELD PROPERTY_BACKING_FIELD name:c2 type:kotlin.String visibility:public [final,static]
    EXPRESSION_BODY
      CONST String type=kotlin.String value="Value is null"
